apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    app: learning-app-mysql
spec:
  ports:
    - port: 3306 # The Service will listen on.
  selector:
    app: learning-app-mysql
    tier: mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  labels:
    app: learning-app-mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: learning-app-mysql
spec:
  selector:
    matchLabels:	# Deployment will manage ReplicaSets with Pods that have both labels matching.
      app: learning-app-mysql
      tier: mysql
  strategy:
    type: Recreate	# Pods will be terminated before new Pods are created during a deployment update.
  template:		# Template for creating Pods managed by the Deployment.
    metadata:		
      labels:
        app: learning-app-mysql
        tier: mysql
    spec:
      containers:
      - image: mysql:latest
        name: mysql
        env:
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config-map
              key: mysql-database-name
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-user-password
        livenessProbe:		# Check pod health on the given port
          tcpSocket:
            port: 3306
        ports:
        - containerPort: 3306	# Defines the ports that the container exposes
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:			# Claims volume from PersistentVolumeClaim yml.
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc